Asm (Assembly) Listings (a_reg = adrs reg, p_reg = stack pointer reg)
0: nop | 4:op 12:null
  No OPeration - Perform No Operation
1: mov | 4:op 4:src 4:dst 4:alu_op
  MOVe - Copy value in src reg to dst reg, and set alu operation to alu_op
2: jmp | 4:op 4:a_reg 8:adrs
  JuMP - put adrs in lower half of a_reg, jump to value in a_reg
3: jpc | 4:op 4:a_reg 8:adrs
  JumP Conditional - put adrs in lower half of a_reg, jump to value in a_reg if Conditional Register
4: pra | 4:op 4:reg 8:val
  Put Reg A - put val in lower half of reg
5: prb | 4:op 4:reg 8:val
  Put Reg B - put val in upper half of reg
6: lod | 4:op 4:reg 8:adrs
  LOaD - put adrs in lower half of MAR, move value in MDR to reg
7: str | 4:op 4:reg 8:adrs
  SToRe - put adrs in lower half of MAR, move value in reg to MDR
8: psh | 4:op 4:p_reg 4:reg 4:null
  PuSH - push reg onto the stack at location p_reg
9: pop | 4:op 4:p_reg 4:reg 4:null
  POP - pop value off stack at p_reg, and put in reg
a: srt | 4:op 4:a_reg 8:adrs
  SubRouTine - put adrs in lower half of a_reg, push PC on the stack, and put adrs in PC
b: ret | 4:op 12:num
  RETurn - pop value off stack into PC, add num to PC
c: out | 4:op 4:reg 8:port
  OUTput - set port equal to reg
d: in  | 4:op 4:reg 8:port
  INput - set reg equal to value at port

Registers
num:abbreviation:name
0:A:A Reg
1:B:B Reg
2:RES:Result Reg
3:PC:Program Counter Reg
4:MAR:Memory Address Reg
5:MDR:Memory Data Reg
6:CND:Conditional Reg
7:BP:Base Pointer
8:SP:Stack Pointer
9:CR:Construction Reg
a:AX:A General Purpose Reg
b:BX:B General Purpose Reg
c:CX:C General Purpose Reg
d:DX:D General Purpose Reg
e:EX:E General Purpose Reg
f:FX:F General Purpose Reg
